Backend Endpoint List

Generic endpoints

/api/cities/{name}

Method: GET
Parameters: none
Path Variables:
    name: Optional parameter. If left blank, a list of all cities in the database will be returned. Otherwise,
            all entries containing the value will be returned, for example /api/cities/Lub will return Lublin and Lubin.

Returns: Array of cities matching the query. Can be empty.



User endpoints  - /api/users/

/register

Method: POST
Path Variables: none
Body:
{
    "name" //First name
    "surname" //Last name
    "email" //Email
    "govID" //Government ID number
    "birthDate" //Date of birth. Format "dd-MM-yyyy"
    "province" //Province
    "city": //City
    "postalCode" //Postal Code,
    "phoneNumber": //Phone number. Saved as a String to ensure compatibility with international formats
    "street": //Street name
    "number": //Street number. Saved as a String to ensure compatibility with all formats, such as "street_number/flat_number"
    "password" //plain-text password
}

Returns:

Status code: 400
Message: Missing fields in body
Fields: [Array]

Reason: Required body fields are missing. Fields listed in the array provided


Status code: 409
Message: This email or person is already registered

Reason: Email or GovID already exist in the database

Status code: 200
Message: Success

Reason: Default, no error


/login

Method: POST
Body:
{
"email" //email
"password" //password
}

Returns:

Status code: 400
Message: Missing fields in body
Fields: [Array]

Reason: Required body fields are missing. Fields listed in the array provided

Status code: 401
Message: Invalid email or password

Reason: User with the given email does not exist in the database or the password does not match

Status code: 200
Message: Success

Reason: Default, no error


/logout

Method: GET
No parameters

Returns:
Status code: 200


/resetpassword?address=

Method: Get
Parameters:
    address: email address for the account reset

Returns:

Returns:

Status code: 400
Message: Missing email in request parameters

Reason: The address parameter in the URL must be provided.


Status code: 500
Message: the mail service threw an error
Error: [String]

Reason: The mail service threw an unexpected error. The error is included in the response.


Status code: 200
Message: password reset mail has been sent, if the account exists

Reason: If no other error has been caught, the backend returns 200 OK, regardless of whether the account exists or not



/resetpassword

Method: POST
Body:
{
    "token" //Password reset token generated by the GET endpoint and sent via mail
    "password" //The new password
}

Returns:

Status code: 400
Message: Missing fields in body
Fields: [Array]

Reason: Required body fields are missing. Fields listed in the array provided


Status code: 410
Message: Token invalid or expired

Reason: Provided token has either expired or is invalid


Status code: 500
Message:invalid user referenced by token


Reason: This should NEVER happen. Only possible if the email referenced by the token has been corrupted or changed manually after the password reset request has been sent.

Status code: 200
Message: Password reset successfully

Reason: Password has been reset successfully.



/search/{query}?type=type&city=city&specialisations=specialisations

Method: GET
Path Variables:
    query: String that gets looked in the database. Can match to name or surname of a doctor or name of an institution, depending on the "type" variable. If ommitted, will match any name.

Parameters:
    type: Determines which collection to search with the given query. Accepted values are "doctor" or "institution". Required
    city: city and province to restrict the search results to. Syntax: "city,province". Not required.
    specialisations: specialisations to restrict the search results to. Syntax: specialisation names separated by a comma. Not required.

Returns:

Status code: 400
Message: unknown type

Reason: "type" if of value different than doctor or institution


Status code: 200
Fields:
    result: search results

Reason: Regardless of the amount of doctors and institutions matching a given query, result is always 200 OK.



/visits/add
Method: POST
Body:
    scheduleID: object ID of the schedule to which a given visit will be assigned
    patientID: object ID of the patient's user profile

Returns:

Status code: 400
Message: Missing fields in request body

Reason: Required fields are missing

Status code: 400
Message: invalid patient id

Reason: Specified patient userID is invalid

Status code: 400
Message: visit time is invalid or booked

Reason: Specified schedule does not exist or is booked already

Status code: 201
Message: success

Reason: visit booked successfully



/visits/getupcoming/{userid}
Method: GET
Path variables:
    userid: doctor's userID

Returns:

Status code: 400
Message: invalid user id

Reason: user id of the doctor is invalid

Status code: 200
Fields:
    visits: upcoming visits for a given user

Reason: successfully retrieved doctor's upcoming schedules


/visits/getactivecodes/{userid}
Method: GET
Path variables:
    userid: patient's userID

Returns:

Status code: 400
Message: invalid user id

Reason: user id of the patient is invalid

Status code: 200
Fields:
    codes: given users' codes

Reason: successfully retrieved user's codes


/schedules/add
Method: POST

Body:
    doctorID: doctor's user id
    institutionID: institution's ID
    startTime: schedule start time (yyyy-MM-dd HH:mm:ss)
    endTime: schedule end time (yyyy-MM-dd HH:mm:ss)

Returns:

Status code: 400
Message: invalid doctor id

Reason: doctor's user id is invalid

Status code: 400
Message: invalid institution id

Reason: institution id is invalid

Status code: 409
Message: this doctor is booked at this hour

Reason: the start time is conflicting with another schedule for a given doctor

Status code: 201
Message: success

Reason:  successfully created a schedule


/schedules/bydoctor/{id}
Method: GET

Path variables:
    id: doctor's user id

Returns:

   Status code: 400
   Message: invalid user id

   Reason: user with a given id does not exist or user is not a doctor


   Status code: 200
   Fields:
    schedules: schedules for a given doctor starting from today

   Reason: schedules retrieved successfully

/doctors/{id}
Method: GET

Path Variables:
    id: id of the doctor

Request parameters:
    fields: Array of fields to return. accepted values are id, name, surname, licence_number, specialisations and employers.

Returns:

Status code; 400
message: invalid user id

Reason: user with a given id does not exist or is not a doctor


Status code; 200
fields;
    doctor: an object with fields specified in the "fields" parameter

Reason: successfully retrieved a doctor. Any unknown fields specified in the list are omitted.



/institution/add
Method: POST

Body:
    name: name of the institution
    isPublic: whether the institution is public or private
    address: address of the institution. Is an object with fields: province, city, street, number and postalCode
    image: Base64 image of the institution

Returns:

Status code: 400
message: missing fields in request body

Reason: there are missing fields in requests' body. Missing fields are listed.

Status code: 409
message: this institution is a possible duplicate.

Reason: An institution with the same name and a very close address is already registered


Status code: 201
message: success

Reason; institution created successfully


/institution/{institutionid}/addemployees/
Method: POST
Path Variables:
    institutionid: objectid of the institution

Body: Array of employee forms

Employee form:
    userID: objectid of the user to add
    rolecode: integer - role to assign to the user within the institution 2 - doctor, 4 - staff, 8 - admin. Roles may be combined
    specialisations: array of strings - if user is a doctor, this list contains specialisations which the doctor uses in the given institution

Returns:

Status code: 400
message: list of users is empty

Reason: empty list of users to add is counted as an error


Status code: 400
message: invalid institution id

Reason: invalid institution id


Status code: 400
message: one or more user IDs is invalid

Reason: If at least one user id is invalid, the operation is aborted


Status code: 200
message: status

Reason: successfully added employees



/institution/{id}
Method: GET

Path variables:
    id - object id of the institution

Parameters:
    fields - array of strings - specifies fields to return inside of the response. Accepted values are "id", "name", "types", "isPublic", "address", "employees", "rating" and "image"

Returns:

Status code: 400
Message: invalid institution id

Reason: Provided institution id is invalid

Status code: 200
Fields:
    institution: object containing all fields specified in the fields parameter or all if omitted

Reason: successfully retrieved visit


/visits/{id}
Method: DELETE

Path variables:
    id - object id of the visit

Returns:

Status code: 401

Reason: User is not logged in


Status code: 403

Reason: User is not the patient from the visit, a staff member from the institution listed in the visit or the visit with this ID does not exist


Status code; 400
Message: this visit is completed/cancelled

Reason: this visit has already been marked as completed or cancelled respectively


Status code: 200

Reason: Visit successfully cancelled



/users/me/codes/{codeType}
Method: GET

Path variables:
    codeType - specifies the code type to return. Accepted values are "prescriptions" and "referrals". If ommitted, will output both types of codes.

Returns:

Status code: 401

Reason: User is not logged in


Status code: 400
Message: invalid code type

Reason: code type provided is not prescriptions or referrals


Status code: 500

Reason: if the schedule id inside of the visit is invalid, the server is programmed to throw a 500. THIS SHOULD NEVER HAPPEN

Status code; 200
Fields:
    codes: - a list of objects containing active codes and their code types



/visits/{visitid}/reschedule
Method: PUT

Path variables:
    visitid - objectid of the visit to reschedule

Parameters:
    newschedule - object id of the new schedule to rebook the visit to


Returns;

Status code: 401

Reason - user is not logged in


Status code: 403

Reason: visitid is invalid or the user is not the patient assigned to the visit or a member of staff of the institution specified in the visit


Status code: 400
Message: this visit is completed

Reason: visit is already completed


Status code: 400
Message: this visit is already cancelled

Reason: Cancelled visits cannot be rebooked. A new one must be created


Status code: 400
Message: invalid new schedule id or schedule is booked

Reason: object id of the new schedule is invalid or the schedule is already booked

Status code: 500

Reason: if the schedule id inside of the visit is invalid, the server is programmed to throw a 500. THIS SHOULD NEVER HAPPEN


Status code: 200

Reason: visit rebooked successfully



/users/me/visits
Method: GET

Parameters:
    upcoming - if ommitted, the method returns all visits. If not blank, returns only upcoming visits


Returns:

Status code: 401

Reason: User is not logged in


Status code: 200
fields:
    visits: contains either all or upcoming visits for a given user, depending on the "upcoming" parameter

Reason: successfully retrieved visits



/comments/add
Method: POST

Request body:
    visitID: Object id of the visit which a given comment is for
    institutionRating: a rating for the institution. accepted values are between 1 and 5 in increments of 0.5
    doctorRating: a rating for the doctor. accepted values are between 1 and 5 in increments of 0.5
    comment: the written content of the comment


Returns:

Status code: 401

Reason: User is not logged in


Status code: 400
Message: invalid doctor/institution rating

Reason: the rating provided does not fit within specified bounds


Status code: 403

Reason: provided visit Id is invalid or the user is not the patient from the visit


Status code: 500

Reason: The institution or doctor specified within the visit object under the specified visitID is invalid. This could mean some kind of database corruption


Status code: 201

Reason: comment successfully created



/comments/{id}
Method: GET

Path variables:
    id - object id of the comment


Returns:

Status code: 401

Reason: user is not logged in


Status code: 400
Message: invalid comment id

Reason: a comment with a given object id does not exist


Status code: 200
Fields:
    id - object id of the comment
    author - name and surname of the author
    doctor - name and surname of the doctor
    institution - name of the institution
    doctorRating - a float describing the rating given to the doctor, ranging between 1 and 5
    institutionRating - a float describing the rating given to the institution, ranging between 1 and 5
    content - the written part of the comment

Reason: successfully retrieved the comment


/users/me/comments
Method: GET

Returns:

Status code: 401

Reason: user is not logged in


Status code: 200
Fields:
    comments - a list of comments with the same syntax as /comments/{id}

Reason: successfully retrieved all comments authored by the user


/visits/{visitid]/complete
Method: PUT

Path variables:
    visitid - object id of the visit

Body:
    prescriptions: Array of strings containing codes for prescriptions
    referrals: Array of strings containing codes for referrals
    note: String containing a note for the patient from the doctor

Returns:
    401 - Not logged in
    403 - When visit id invalid or user does not have access (not logged in as the doctor in charge of a visit)
    400 - When visit is already completed or cancelled
    200 - Success




